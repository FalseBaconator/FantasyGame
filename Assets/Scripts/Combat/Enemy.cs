using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class Enemy : MonoBehaviour
{
    //Data
    public float HP;
    public float MaxHP;
    public TextMeshProUGUI HPField;
    public int XP;

    public float dmg;

    public float cooldownLength;
    public float cooldownOffset;
    public float currentCooldown;

    private CombatManager combatManager;

    //Objects to make invisible upon death.
    public GameObject[] objectsToHide;

    //Placeholder Feedback
    //public GameObject atkDisplay;
    //public GameObject dmgDisplay;
    //public GameObject healDisplay;

    public Image ice;
    public float iceTimer;

    public bool alive;

    public int dangerScore;

    public float spriteTimerCurrent;
    public float windLength;
    public float attackLength;
    public float hurtLength;

    public Image img;
    public Sprite idle;
    public Sprite windUp;
    public Sprite attack;
    public Sprite hurt;

    // Called when generated by CombatManager
    void Awake()
    {
        img.sprite = idle;
        currentCooldown = cooldownOffset;
        combatManager = FindObjectOfType<CombatManager>();
        HP = MaxHP;
        HPField.text = HP.ToString() + "/" + MaxHP.ToString();
        alive = true;
        Button button = GetComponent<Button>();
        button.onClick.AddListener(BecomeTarget);
    }

    // Update is called once per frame
    void Update()
    {
        if (combatManager.playing && HP > 0)
        {
            if (iceTimer > 0)   //Stunned by Mage
            {
                iceTimer -= Time.deltaTime;
            }
            else
            {
                ice.gameObject.SetActive(false);

                //Attack when Cooldown is done]
                if (img.sprite == idle)
                {
                    Debug.Log("A");
                    currentCooldown += Time.deltaTime;
                    if (currentCooldown >= cooldownLength)
                    {
                        StartAttacking();
                    }
                }
                else
                {
                    Debug.Log("B");
                    spriteTimerCurrent -= Time.deltaTime;
                    if(spriteTimerCurrent <= 0)
                    {
                        if(img.sprite == windUp)
                        {
                            Attack();
                        }
                        else
                        {
                            img.sprite = idle;
                        }
                    }
                }
            }
        }
    }

    /*private void OnMouseDrag()            I don't know when I might need this
    {
        if(combatManager.attackTargetType == PartyMember.Target.enemies)
        {
            combatManager.attacker.GetComponent<PartyMember>().Attack(gameObject);
        }
    }*/

    //Stuns because of Ice
    public void Freeze(float time)
    {
        iceTimer = time;
        ice.gameObject.SetActive(true);
    }

    public void StartAttacking()
    {
        spriteTimerCurrent = windLength;
        img.sprite = windUp;
    }

    //Attacks a party member
    public void Attack()
    {
        spriteTimerCurrent = attackLength;
        img.sprite = attack;
        //atkDisplay.GetComponent<DMGDisplay>().activate();   //Placeholder Feedback
        if (combatManager.shields > 0)  //Attacks Shield
        {
            combatManager.shields--;
        }
        else    //Attacks Party Member
        {
            //Has a limit to targetting attempts in case all targets are dead
            int attempt = 0;
            PartyMember target;
            do
            {
                attempt++;
                target = combatManager.partyMembers[Random.Range(0, combatManager.partyMembers.Count)];
            } while (target.HP <= 0 && attempt < 5);

            if(target.alive) target.TakeDMG(dmg);
        }

        currentCooldown = 0;
    }

    //Get Attacked
    public void BecomeTarget()
    {
        if (combatManager.attackTargetType == PartyMember.Target.enemies && combatManager.attacker != null)
        {
            combatManager.attackTarget = gameObject;
        }
    }

    //Take Damage
    public void TakeDMG(float dmg)
    {
        spriteTimerCurrent = hurtLength;
        img.sprite = hurt;
        //dmgDisplay.GetComponent<DMGDisplay>().activate();
        HP -= dmg;
        if(HP <= 0)
        {
            HP = 0;
            Die();
        }
        HPField.text = HP.ToString() + "/" + MaxHP.ToString();
    }

    //Die
    public void Die()
    {
        alive = false;
        combatManager.GainXP(XP);
        foreach (GameObject obj in objectsToHide)
        {
            obj.SetActive(false);
        }
    }

}
